buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'
    }
}
apply plugin: 'android-library'

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
            jni.srcDirs = [] //disable automatic ndk-build call
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    // call regular ndk-build(.cmd) script from app directory
    task taskNdkBuild(type: Exec) {
        logger.info('ndkBuild Configuration')
        def ndkBuild;
        def ndkBuildingDir = new File("./")
        def hasNdk = false;
        logger.info('Project Path: ' +projectDir)
        logger.info('JNI Path: ' +ndkBuildingDir)

        def lpfile = file('local.properties');
        if (lpfile.exists())
        {
            def Properties localProps = new Properties()
            localProps.load(new FileInputStream(lpfile))
            if (localProps['ndk.dir'] !=null)
            {
                logger.info('Taking ndk.dir')
                ndkBuild = new File(localProps['ndk.dir'], 'ndk-build')
                commandLine ndkBuild, '-C', file('.').absolutePath
                //commandLine ndkBuild, 'NDK_DEBUG=1', '-C', file('.').absolutePath
                return
            }
        }
        else logger.info('local.properties does not exist')

        if (System.env.ANDROID_NDK_HOME != null)
        {
            logger.info('System.env.ANDROID_NDK_HOME is set')
            hasNdk = true;
            ndkBuild = new File(System.env.ANDROID_NDK_HOME, 'ndk-build')
            commandLine ndkBuild, '-C', file('.').absolutePath
            //commandLine ndkBuild, 'NDK_DEBUG=1', '-C', file('.').absolutePath
        }
        else
        {
            logger.error('Either ndk.dir in local.properties or ANDROID_NDK_HOME is not set.')
            commandLine 'echo Please see error msg above'
        }

    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn taskNdkBuild
    }

}
